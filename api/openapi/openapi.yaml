openapi: 3.0.3
info:
  description: MyTODO OpenAPI Document
  title: MyTODO OpenAPI
  version: 1.0.0
servers:
- description: Mock Server
  url: http://localhost:4012
- description: localhost
  url: http://localhost:3010
tags:
- description: ユーザー
  name: user
- description: ToDo
  name: todo
paths:
  /v1/users/sign_up:
    post:
      operationId: postUserSignUp
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SignUpRequest'
        description: ユーザー新規登録リクエスト
        required: true
      responses:
        "201":
          description: Created
      security:
      - Bearer: []
      summary: ユーザー新規登録
      tags:
      - user
  /v1/users/me:
    get:
      operationId: getUserMe
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserMe'
          description: OK
      security:
      - Bearer: []
      summary: ユーザー自分情報取得
      tags:
      - user
  /v1/todos:
    get:
      operationId: getTodos
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Todo'
                type: array
          description: OK
      security:
      - Bearer: []
      summary: ToDo一覧
      tags:
      - todo
    post:
      operationId: postTodos
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TodoPostRequest'
        description: ToDo作成リクエスト
        required: true
      responses:
        "201":
          description: Created
      security:
      - Bearer: []
      summary: ToDo作成
      tags:
      - todo
  /v1/todos/{id}:
    get:
      operationId: getTodo
      parameters:
      - description: ToDoID
        example: 01HJSQYWS4NMYV4ZV9GHQJ5P72
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
          description: OK
      security:
      - Bearer: []
      summary: ToDo詳細取得
      tags:
      - todo
    parameters:
    - description: ToDoID
      example: 01HJSQYWS4NMYV4ZV9GHQJ5P72
      in: path
      name: id
      required: true
      schema:
        type: string
components:
  schemas:
    NotAuthorizedError:
      description: 認証不可エラー
      properties:
        message:
          description: JWT認証などの認証エラー
          example: Not authorized.
          type: string
      required:
      - message
      type: object
    NotFoundError:
      description: 存在しませんエラー
      properties:
        message:
          description: GETしたい情報が見つからないエラー
          example: Your requested Item is not found
          type: string
      required:
      - message
      type: object
    SignUpRequest:
      description: 新規登録リクエスト
      properties:
        nickname:
          description: ニックネーム
          example: ゆあろー
          type: string
        email:
          description: メールアドレス
          example: test@example.com
          type: string
        icon:
          description: アイコン
          example: hoge.png
          format: binary
          type: string
      required:
      - email
      - icon
      - nickname
      type: object
    UserMe:
      description: ユーザー自分情報
      example:
        nickname: ゆあろー
        icon: hoge.png
        email: test@example.com
      properties:
        nickname:
          description: ニックネーム
          example: ゆあろー
          type: string
        email:
          description: メールアドレス
          example: test@example.com
          type: string
        icon:
          description: アイコン
          example: hoge.png
          format: binary
          type: string
      required:
      - email
      - icon
      - nickname
      type: object
    Todo:
      description: ToDo
      example:
        id: 01HJSQYWS4NMYV4ZV9GHQJ5P72
        title: やること
        content: 料理を作る
      properties:
        id:
          description: ID
          example: 01HJSQYWS4NMYV4ZV9GHQJ5P72
          type: string
        title:
          description: タイトル
          example: やること
          type: string
        content:
          description: 内容
          example: 料理を作る
          nullable: true
          type: string
      required:
      - id
      - title
      type: object
    TodoPostRequest:
      description: ToDo作成リクエスト
      example:
        title: やること
        content: 料理を作る
      properties:
        title:
          description: タイトル
          example: やること
          type: string
        content:
          description: 内容
          example: 料理を作る
          nullable: true
          type: string
      required:
      - title
      type: object
  securitySchemes:
    Bearer:
      description: Credentials or access token for API
      scheme: bearer
      type: http
